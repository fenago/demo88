# -*- coding: utf-8 -*-
"""Unsupervised.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFpTtbXEUIlMSPVDMlte5oIkCv8eQXb5
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

file_url = "https://raw.githubusercontent.com/fenago/datasets/refs/heads/main/taxstats2015.csv"

df = pd.read_csv(file_url,usecols=['Postcode','Average net tax', 'Average total deductions'])
df.head()

df.tail()

kmeans = KMeans(random_state=42)

X = df[['Average net tax', 'Average total deductions']]

kmeans.fit(X)

y_preds = kmeans.predict(X)
y_preds

df['cluster'] = y_preds
df.head()

# prompt: based on this cluster analysis - please create 2 visuals

import matplotlib.pyplot as plt
import seaborn as sns

# Visual 1: Scatter plot of Average net tax vs. Average total deductions, colored by cluster
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Average net tax', y='Average total deductions', hue='cluster', data=df, palette='viridis')
plt.title('Clusters of Taxpayers based on Net Tax and Total Deductions')
plt.xlabel('Average Net Tax')
plt.ylabel('Average Total Deductions')
plt.show()

# Visual 2: Distribution of Average net tax within each cluster
plt.figure(figsize=(10, 6))
sns.histplot(x='Average net tax', hue='cluster', data=df, kde=True, palette='viridis')
plt.title('Distribution of Average Net Tax across Clusters')
plt.xlabel('Average Net Tax')
plt.ylabel('Frequency')
plt.show()

import numpy as np
df.pivot_table(values=['Average net tax', 'Average total deductions'], index='cluster', aggfunc=np.mean)

import altair as alt
alt.Chart(df).mark_circle(size=60).encode(
    x='Average net tax',
    y='Average total deductions',
    color='cluster',
    tooltip=['Postcode', 'Average net tax', 'Average total deductions']
).interactive

chart = alt.Chart(df)
scatter_plot = chart.mark_circle()
scatter_plot.encode(x='Average net tax', y='Average total deductions', color='cluster:N')

scatter_plot.encode(x='Average net tax', \
                    y='Average total deductions', \
                    color='cluster:N', \
                    tooltip=['Postcode', \
                             'cluster', 'Average net tax', \
'Average total deductions'])\
                    .interactive()

"""# Cluster ATO by Business Income and Expenses"""

import pandas as pd
from sklearn.cluster import KMeans
import altair as alt
import numpy as np

df = pd.read_csv(file_url, usecols=['Postcode', 'Average total business income', 'Average total business expenses'])

df.tail(10)

X = df[['Average total business income', 'Average total business expenses']]

kmeans = KMeans(random_state=8)
kmeans.fit(X)

y_preds = kmeans.predict(X)
y_preds[-10:]

df['cluster'] = y_preds
df.tail(10)

df.pivot_table(values=['Average total business income', 'Average total business expenses'], index='cluster', aggfunc=np.mean)

# prompt: please create 2 visuals for the above data

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# ... (Your existing code for data loading and clustering)

# Visual 1: Scatter plot of Average total business income vs. Average total business expenses, colored by cluster
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Average total business income', y='Average total business expenses', hue='cluster', data=df, palette='viridis')
plt.title('Clusters of Businesses based on Income and Expenses')
plt.xlabel('Average Total Business Income')
plt.ylabel('Average Total Business Expenses')
plt.show()


# Visual 2: Box plot of Average total business income per cluster
plt.figure(figsize=(10, 6))
sns.boxplot(x='cluster', y='Average total business income', data=df, palette='viridis')
plt.title('Distribution of Average Total Business Income across Clusters')
plt.xlabel('Cluster')
plt.ylabel('Average Total Business Income')
plt.show()

scatter_plot = alt.Chart(df).mark_circle()
scatter_plot.encode(x='Average total business income', y='Average total business expenses', color='cluster:N', tooltip=['Postcode', 'cluster', 'Average total business income', 'Average total business expenses']).interactive()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Load data
file_url = "https://raw.githubusercontent.com/fenago/datasets/refs/heads/main/taxstats2015.csv"
df = pd.read_csv(file_url, usecols=['Postcode', 'Average total business income', 'Average total business expenses'])

# Drop rows with missing or zero/negative values
df = df[(df['Average total business income'] > 0) & (df['Average total business expenses'] > 0)].dropna()

# Log transform to reduce skew
df['log_income'] = np.log(df['Average total business income'])
df['log_expenses'] = np.log(df['Average total business expenses'])

# Standardize the data
X = df[['log_income', 'log_expenses']]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine optimal number of clusters using Elbow Method
inertia = []
K = range(2, 10)
for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot Elbow
plt.figure(figsize=(8, 4))
plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method For Optimal k')
plt.grid(True)
plt.show()

# Choose optimal k (you can adjust based on the elbow plot)
optimal_k = 4
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Plot clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(
    data=df,
    x='Average total business income',
    y='Average total business expenses',
    hue='cluster',
    palette='tab10',
    s=60
)
plt.title('Clusters of Businesses based on Income and Expenses')
plt.xlabel('Average Total Business Income')
plt.ylabel('Average Total Business Expenses')
plt.legend(title='Cluster')
plt.tight_layout()
plt.show()

"""# Finding the Best number of clusters"""

import pandas as pd
from sklearn.cluster import KMeans
import altair as alt

df = pd.read_csv(file_url, \
                 usecols=['Postcode', \
                          'Average total business income', \
'Average total business expenses'])

X = df[['Average total business income', \
        'Average total business expenses']]

clusters = pd.DataFrame()
inertia = []

clusters['cluster_range'] = range(1,15)

for k in clusters['cluster_range']:
    kmeans = KMeans(n_clusters=k).fit(X)
    inertia.append(kmeans.inertia_)

clusters['inertia'] = inertia
clusters

alt.Chart(clusters).mark_line()\
   .encode(alt.X('cluster_range'), alt.Y('inertia'))

optim_cluster = 4
kmeans = KMeans(random_state=42, n_clusters=optim_cluster)
kmeans.fit(X)

df['cluster2'] = kmeans.predict(X)

df.head()

alt.Chart(df).mark_circle()\
             .encode\
              (x='Average total business income', \
               y='Average total business expenses', \
               color='cluster2:N', \
               tooltip=['Postcode', 'cluster2', \
                        'Average total business income',\
'Average total business expenses'])\
             .interactive()

# prompt: please give me a visual that shows the centroid

# ... (Your existing code)

# Finding the Best number of clusters
df = pd.read_csv(file_url, \
                 usecols=['Postcode', \
                          'Average total business income', \
'Average total business expenses'])
X = df[['Average total business income', \
        'Average total business expenses']]
clusters = pd.DataFrame()
inertia = []
clusters['cluster_range'] = range(1,15)
for k in clusters['cluster_range']:
    kmeans = KMeans(n_clusters=k).fit(X)
    inertia.append(kmeans.inertia_)
clusters['inertia'] = inertia
clusters
alt.Chart(clusters).mark_line()\
   .encode(alt.X('cluster_range'), alt.Y('inertia'))
optim_cluster = 4
kmeans = KMeans(random_state=42, n_clusters=optim_cluster)
kmeans.fit(X)
df['cluster2'] = kmeans.predict(X)
df.head()

# Visualize centroids
centroids = kmeans.cluster_centers_

alt.Chart(df).mark_circle().encode(
    x='Average total business income',
    y='Average total business expenses',
    color='cluster2:N',
    tooltip=['Postcode', 'cluster2', 'Average total business income', 'Average total business expenses']
).interactive() + alt.Chart(pd.DataFrame(centroids, columns=['Average total business income', 'Average total business expenses'])).mark_point(size=100, shape='diamond', filled=True, color='black').encode(
    x='Average total business income',
    y='Average total business expenses'
)